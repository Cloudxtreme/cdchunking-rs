var searchIndex = {};
searchIndex["cdchunking"] = {"doc":"Content-Defined Chunking","items":[[3,"Chunker","cdchunking","Chunker object, wraps the rolling hash into a stream-splitting object.",null,null],[3,"WholeChunks","","",null,null],[3,"ChunkStream","","",null,null],[3,"ChunkInfo","","",null,null],[3,"ChunkInfoStream","","",null,null],[3,"Slices","","",null,null],[3,"SizeLimited","","",null,null],[3,"ZPAQ","","",null,null],[4,"ChunkInput","","Objects returned from the ChunkStream iterator.",null,null],[13,"Data","","",0,null],[13,"End","","",0,null],[8,"ChunkerImpl","","This class is the internal method of finding chunk boundaries.",null,null],[10,"find_boundary","","Look at the new bytes to maybe find a boundary.",1,null],[11,"reset","","Reset the internal state after a chunk has been emitted",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a Chunker from a specific way of finding chunk boundaries.",2,{"inputs":[{"name":"i"}],"output":{"name":"chunker"}}],[11,"whole_chunks","","Iterates on whole chunks from a file, read into new vectors.",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"wholechunks"}}],[11,"all_chunks","","Reads all the chunks at once, in a vector of chunks (also vectors).",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["vec"],"name":"result"}}],[11,"stream","","Reads chunks with zero allocations.",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chunkstream"}}],[11,"chunks","","Describes the chunks (don't return the data).",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chunkinfostream"}}],[11,"slices","","Iterate on chunks in an in-memory buffer as slices.",2,null],[11,"max_size","","Returns a new `Chunker` object that will not go over a size limit.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["sizelimited"],"name":"chunker"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"read","","Iterate on the chunks, returning `ChunkInput` items.",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"length","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_boundary","","",8,null],[11,"reset","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"zpaq"}}],[11,"update","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"find_boundary","","",9,null],[11,"reset","","",9,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"ChunkInput"],[8,"ChunkerImpl"],[3,"Chunker"],[3,"WholeChunks"],[3,"ChunkStream"],[3,"ChunkInfo"],[3,"ChunkInfoStream"],[3,"Slices"],[3,"SizeLimited"],[3,"ZPAQ"]]};
initSearch(searchIndex);
